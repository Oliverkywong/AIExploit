import os
import codecs
import json
import webbrowser
import time
import pyautogui

class XRay:
    def makedir(self, name):
        if os.path.isdir(name) is False:
            os.mkdir(name)

    def checkprotocol(self, addr):
        protocol = addr.split(':')
        if protocol[0] in addr and protocol[0] in ['http', 'https']:
            return self.webadd.replace((protocol[0]+'://'),'')
        else:
            print('Invalid web address')
            exit(1)

    def preparescrcap(self, url, plugin):
        webbrowser.open(url)
        cappng = url.replace(self.webadd,'')
        cappng = cappng.replace('/', '_')
        cappng = cappng + '_' + plugin.replace('/', '_')
        time.sleep(2)
        return cappng

    def __init__(self, webadd):
        self.path = '/home/kali/Desktop/webexploit'
        self.cappath = self.path+'/capscreen'
        self.xrayoutpath = self.path+'/xrayoutput'

        self.makedir(self.xrayoutpath)
        self.makedir(self.cappath)
        self.webadd = webadd
        fileoutput = self.checkprotocol(webadd)

        self.cappath = self.cappath+'/'+fileoutput
        self.makedir(self.cappath)

        os.system("./xray_linux_amd64 webscan --basic-crawler {add} --html-output {path}/{file}.html --json-output {path}/{file}.json".format(add=webadd, path=self.xrayoutpath, file=fileoutput))

        fin = codecs.open(os.path.join(self.xrayoutpath, fileoutput+'.json'), 'r', 'utf-8')
        xrayjson = json.loads(fin.read())
        fin.close()

        pluginlist = []
        fin = codecs.open(os.path.join(self.path, 'pluginlist.txt'), 'r', 'utf-8')
        for plugin in fin:
            pluginlist.append(plugin[:-1])
        fin.close()

        for data in xrayjson:

            if data['plugin'] not in pluginlist:
                fout = codecs.open(os.path.join(self.path,'pluginlist.txt'), 'a', 'utf-8')
                fout.write(str(data['plugin'])+'\n')
                fout.close()
                print("found new plugin")

            if 'xss' in data['plugin']:
                os.system("python3 ./XSStrike/xsstrike.py --crawl -u {0}".format(data['detail']['addr']))
            elif 'sqldet' in data['plugin']:
                if '?' not in data['detail']['addr']:
                    os.system("sqlmap -u {0} --crawl=30 --answers='follow=Y,sitemap=N' --batch".format(data['detail']['addr']))
                else:
                    os.system("sqlmap -u {0} --answers='follow=Y' --batch".format(data['detail']['addr']))
            elif 'brute-force' in data['plugin']:
                print('brute-force',data['detail']['snapshot'])
            elif 'sourcemap' in data['plugin'] or '.xml' in data['target']['url']:
                cappng = self.preparescrcap(data['target']['url'], data['plugin'])
                myScreenshot = pyautogui.screenshot()
                myScreenshot.save(self.cappath +'/'+cappng+'.png')
            elif data['target']['url'][-4:] in ['.zip', '.bak']:
                print("have unexpected {0} file download".format(data['target']['url'][-3:]))
            elif 'htaccess' in data['plugin']:
                print("have unexpected htaccess file download")
            else:
                cappng = self.preparescrcap(data['target']['url'], data['plugin'])
                os.system("cutycapt --url={0} --out='{1}/{2}.png'".format(data['target']['url'], self.cappath, cappng))
