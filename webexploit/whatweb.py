import os
import codecs
import json
import time
import pandas as pd
import re
import socket
from util import Utilty
from msfconsole import Msgrpc
from metasploit import Metasploit

class Whatweb:
    def makedir(self, name):
        if os.path.isdir(name) is False:
            os.mkdir(name)

    def checkprotocol(self, addr):
        protocol = addr.split(':')
        if protocol[0] in addr and protocol[0] in ['http', 'https']:
            return self.webadd.replace((protocol[0]+'://'),'')
        else:
            print('Invalid web address')
            exit(1)

    def countnum(self, exploit_tree, target_tree, service_list):
        ttconut = 0
        ostype = target_tree['os_type']

        for idx,service in enumerate(service_list):
            module_list = service['exploit']
            for exploit in module_list:
                target_list = exploit_tree[exploit]['target_list']
                service_name = service['prod_name']
                for target in target_list:
                    payload_list = exploit_tree[exploit]['targets'][target]
                    if service_name != 'unknown':
                        available_actions = self.env.get_available_actions(payload_list, ostype)
                        ttconut += len(available_actions)
        return ttconut

    def __init__(self, webadd):
        global ostype
        self.util = Utilty()

        self.path = '/home/kali/Desktop/webexploit'
        self.outpath = self.path+'/whatweboutput'
        
        self.makedir(self.outpath)
        self.webadd = webadd
        fileoutput = self.checkprotocol(webadd)
        
        os.system('whatweb --log-json={path}/whatweb_{file}.json {add}'.format(add=webadd, path=self.outpath, file=fileoutput))

        fin = codecs.open(os.path.join(self.outpath, 'whatweb_'+fileoutput+'.json'), 'r', 'utf-8')
        self.json = json.loads(fin.read())
        fin.close()

        keys = self.json[0]['plugins'].keys()

        ser_file = os.path.join(self.outpath, 'webservices.csv')
        ser = pd.read_csv(ser_file)
        for col in ser.columns:
            sername = ser[col].tolist()

        os_file = os.path.join(self.outpath, 'ostype.csv')
        ot = pd.read_csv(os_file)
        for col in ot.columns:
            otl = ot[col].tolist()

        for key in keys:
            if key in sername:
                search_cmd = 'search ' + key + '\n' 
            elif key == 'HTTPServer':
                if 'os' in self.json[0]['plugins']['HTTPServer'].keys():
                    for os_name in otl:
                        if os_name in self.json[0]['plugins'][key]['os'][0].lower():
                            ostype = os_name
                            break
                        else:
                            ostype = "unknown"
                else:
                    ostype = "unknown"
            elif key == "IP":
                rhost = self.json[0]['plugins'][key]['string'][0]
                break

        st = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        st.connect(('10.255.255.255',1))
        server_host = st.getsockname()[0]

        self.env = Metasploit(rhost)   
        nmap_result = os.getcwd() + '/nmap_result_' + self.env.rhost + '.xml'
        nmap_command = self.env.nmap_command + ' ' + nmap_result + ' ' + self.env.rhost + '\n'
        com_port_list, proto_list, info_list = self.env.get_port_list(self.env.rhost, nmap_command, self.env.nmap_timeout, nmap_result)
        com_exploit_list = self.env.get_exploit_list()
        com_payload_list = self.env.get_payload_list()
        com_payload_list.append('no payload')
        
        exploit_tree = self.env.get_exploit_tree()
        target_tree = self.env.get_target_info(rhost, proto_list, info_list)  

        service_list = target_tree['service_list']
        port_list = target_tree['opened_port_list']
        sess_list = []

        if len(service_list) == 0:
            util.print_message('warn', 'No open service.')
            util.print_message('warn', 'Shutdown Exploit Expert...')
            exit(1)
        
        ttcount = self.countnum(exploit_tree, target_tree, service_list)
        for idx,service in enumerate(service_list):
            sess_info = self.env.run(exploit_tree, target_tree, idx, ttcount)
    

        # os.system('rm {}'.format(os.path.join(self.outpath, fileoutput+'.json')))