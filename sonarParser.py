import requests
import re
import pandas as pd
import os
import sys, getopt


'''
README

1. Required package
    python 3.x 
    pip install pandas
    pip install openpyxl
    
2. (optional) set "report_path"

3. add "task", format : ["{proj-key in sonarQube}", "{ip of scanner}"]

4. (optional) add cred if not included

5. run the script
'''


### Config

class bcolors:
    blink = '\033[6;32;40m' 
    reversecolor = '\033[7;32;40m'
    stop = '\033[0;0m'


report_path = './sonarqube_reports'

### old 
tasks = [
    ['eTS-1', '192.168.1.126'], 
    #['ird_source_be_ird1', 127],
    #['ird_source_be_ird2', 113],
]
### 

###credential is hardcoded
cred = {
    '192.168.1.113' : {'login':'admin', 'password':'PassW0rd'},
    '192.168.1.70' : {'login':'admin', 'password':'PassW0rd'},
    '192.168.1.68' : {'login':'admin', 'password':'PassW0rd'},
    '192.168.1.56' : {'login':'admin', 'password':'PassW0rd1'},
    '10.15.116.27' : {'login':'admin', 'password':'PassW0rd'},
    '192.168.1.127' : {'login':'admin', 'password':'master123'},
    '192.168.1.126' : {'login':'admin', 'password':'master123'},
}
auth = [{'login':'admin', 'password':'PassW0rd'},
        {'login':'admin', 'password':'master123'}]
def helpbanner():
    print(bcolors.blink +"[" +"*"+ "]"+ "The command syntax in cmd : python3 -i <SonarQube ip> -k <project-key in SonarQube>"+ bcolors.stop)

def main(argv):
    ipaddress=''
    projectkeyname=''
    try:
        opts, args = getopt.getopt(argv,"hi:k:",["ip=","key="])
    except getopt.GetoptError:
        helpbanner()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print("For help, please check the following")
            helpbanner()
            sys.exit()
        elif opt in ("-i", "--ip"):
            ipaddress = arg
            
        elif opt in ("-k", "--key"):
            projectkeyname = arg

    return ipaddress,projectkeyname
    
 ### define the arugments           
def getCookies(ip):
    i=0
    while True:
        cred.update({ip:auth[i]})
        print(cred)
        response = requests.post(f'http://{ip}:9000/api/authentication/login', data=cred[ip])
        if response.status_code == 200: 
            headers = response.headers['Set-Cookie']
            session = re.search('JWT-SESSION=(\S+);', headers).group(1)
            return {'JWT-SESSION': session}
        elif i<len(auth):
            i=i+1
        else:
            login = input("login name: ")
            pwd = input("password: ")
            auth.append({"login":login, "password":pwd})
    
def getDetails(key,ip,cookies):
    url = f'http://{ip}:9000/api/hotspots/show?hotspot={key}'
    response = requests.get(url, cookies=cookies)
    if response.status_code == 200:
        return response.json()
    else:
        print(f'No details : {response.status_code} - {url}')
        return False
def getCodes(component, line, ip, cookies):
    url = f'http://{ip}:9000/api/sources/lines?key={component}&from={line}&to={line}'
    response = requests.get(url, cookies=cookies)
    if response.status_code == 200:
        return response.json()['sources'][0]['code']
    else:
        print(f'No codes : {response.status_code} - {url}')
        return False
def getJson(key, page, ip, cookies):
    url = f'http://{ip}:9000/api/hotspots/search?projectKey={key}&p={page}&ps=500&status=TO_REVIEW&onlyMine=false&sinceLeakPeriod=false'
    response = requests.get(url, cookies=cookies)
    if response.status_code == 200:
        return response.json()
        ### return dict
    else:
        print(f'No json : {response.status_code} - {url}')
        return False

def cleanHTML(string):
    return re.sub(r'<.*?>', '', string).strip()

def parseJson(proj, ip):
    cookies = getCookies(ip)
    data = getJson(proj, 1, ip, cookies)
    if data:
        ## additional info
        total = data['paging']['total']
        hotspots = data['hotspots']
        if 500 < total < 1000:
            data2 = getJson(proj, 2, ip, cookies)
            hotspots += data2['hotspots']
        n = 0
        for hs in hotspots:
            key = hs['key']
            dtl = getDetails(key, ip, cookies)
            for item in ['name', 'riskDescription', 'vulnerabilityDescription', 'fixRecommendations']:
                hs[item] = cleanHTML(dtl['rule'][item])
            try:
                hs['codes'] = cleanHTML(getCodes(hs['component'], hs['line'], ip, cookies))
            except KeyError:
                hs['codes'] = "<No codes were identified for this finding>"
            n+=1
            print(f'{proj:<24} : parsed {n:>6}/{total}',end='\r')
            
        ## DF
        
        df = pd.DataFrame(hotspots)
        cols= [
            'key','project',
            'securityCategory','status','author','creationDate','updateDate', 'vulnerabilityDescription',
            'name','message','riskDescription', 
            'fixRecommendations','component','line','codes','vulnerabilityProbability'
        ]
        df =df[cols]
        save_path = f"{report_path}/SonarQube-report-{proj}.xlsx"
        df.to_excel(save_path)
        print(f'{proj:<24} : report saved at "{save_path}"')
        return df
    else:
        print(f'{proj:<24} : failed')
        
        
####Starts here
os.system('cls')
print(bcolors.blink + "Tony's SonarQube parser"+ bcolors.stop)
helpbanner()

ipaddress, projectkeyname= main(sys.argv[1:])

if not os.path.isdir(report_path):
    print(bcolors.reversecolor + "[" +"*"+ "]" +"This scripts creates a folder because the expected folder name does not exist."+ bcolors.stop)
    os.mkdir(report_path)
    
parseJson(projectkeyname, ipaddress)
#for task in tasks:
#    parseJson(task[0], task[1])


'''
API:
- get line            : http://192.168.1.113:9000/api/sources/lines?key=ird_source_ias:JBossIDE/jboss-4.0.5.GA/docs/examples/jca/db2-400-ds.xml&from=19&to=30
- get detail by key   : http://192.168.1.127:9000/api/hotspots/show?hotspot=AYB0Kfb6QeNOT1j4Vdur
- get all hotspots    : http://192.168.1.113:9000/api/hotspots/search?projectKey={key}&p={page}&ps=500&status=TO_REVIEW&onlyMine=false&sinceLeakPeriod=false
'''