import requests
from bs4 import BeautifulSoup
import json
import csv
import re
import time
import os
import pandas as pd

class Googledork:
    def makedir(self, name):
        if os.path.isdir(name) is False:
            os.mkdir(name)

    def checkprotocol(self, addr):
        protocol = addr.split(':')
        if protocol[0] in addr and protocol[0] in ['http', 'https']:
            return self.webadd.replace((protocol[0]+'://'),'')
        else:
            print('Invalid web address')
            exit(1)

    def google(self, searchparam, function):
        response = requests.get('https://www.google.com/search?q={}'.format(searchparam))

        bs = BeautifulSoup(response.text, 'html5lib')

        scrapdata = bs.findAll("h3")
        dataset = { 'function':function,
                    'title':[],
                    'url':[]}
        for content in scrapdata:
            a = content.find_parents("a")
            
            dataset['title'].append(a[0].h3.get_text())

            url = a[0].attrs['href'][7:]
            url = url.split('&')
            dataset['url'].append(url[0])

        output = os.path.join(self.outpath, self.param+'.csv')
        csv = pd.DataFrame([dataset])
        csv.to_csv(os.path.join(self.outpath, self.param+'.csv'), mode='a', header=False, index=False)
    

    def __init__(self, webadd):
        self.path = '/home/kali/Desktop/webexploit'
        self.outpath = self.path+'/dataleakageoutput'

        self.makedir(self.outpath)

        print("1: Search for directory listing vulnerabilities\n2: Search for configuration files\n3: Search for database / files\n4: Search for log files\n5: Search for backup and old files\n6: Search for admin login pages\n7: Search for SQL errors\n8: Search for publicly exposed documents\n9: Search for phpinfo():\nall")

        funsel = input("function select: ")
        funsel = funsel.strip()

        self.webadd = webadd
        self.param = self.checkprotocol(webadd)

        arr = [ {'name': 'directory vulnerabilities',
                'searchparam': 'site%3A{}%2F+intitle%3Aindex.of'},
                {'name': 'configuration file',
                'searchparam': 'site%3A{}%2F+ext%3Axml+%7C+ext%3Aconf+%7C+ext%3Acnf+%7C+ext%3Areg+%7C+ext%3Ainf+%7C+ext%3Ardp+%7C+ext%3Acfg+%7C+ext%3Atxt+%7C+ext%3Aora+%7C+ext%3Aini'},
                {'name': 'database / file',
                'searchparam': 'site%3A{}%2F+ext%3Asql+%7C+ext%3Adbf+%7C+ext%3Amdb+%7C+ext%3Adoc+%7C+ext%3Adocx+%7C+ext%3Aodt+%7C+ext%3Apdf+%7C+ext%3Artf+%7C+ext%3Asxw+%7C+ext%3Apsw+%7C+ext%3Appt+%7C+ext%3Apptx+%7C+ext%3Apps+%7C+ext%3Acsv'},
                {'name': 'log files',
                'searchparam': 'site%3A{}%2F+ext%3Alog'},
                {'name': 'backup and old files',
                'searchparam': 'site%3A{}%2F+ext%3Abkf+%7C+ext%3Abkp+%7C+ext%3Abak+%7C+ext%3Aold+%7C+ext%3Abackup'},
                {'name': 'admin login pages',
                'searchparam': 'site%3A{}%2F+inurl%3Alogin'},
                {'name': 'SQL errors',
                'searchparam': 'site%3A{}%2F+intext%3A"sql+syntax+near"+%7C+intext%3A"syntax+error+has+occurred"+%7C+intext%3A"incorrect+syntax+near"+%7C+intext%3A"unexpected+end+of+SQL+command"+%7C+intext%3A"Warning%3A+mysql_connect%28%29"+%7C+intext%3A"Warning%3A+mysql_query%28%29"+%7C+intext%3A"Warning%3A+pg_connect%28%29"'},
                {'name': 'publicly exposed document',
                'searchparam': 'site%3A{}%2F+ext%3Adoc+%7C+ext%3Adocx+%7C+ext%3Aodt+%7C+ext%3Apdf+%7C+ext%3Artf+%7C+ext%3Asxw+%7C+ext%3Apsw+%7C+ext%3Appt+%7C+ext%3Apptx+%7C+ext%3Apps+%7C+ext%3Acsv'},
                {'name': 'phpinfo',
                'searchparam': 'site%3A{}%2F+ext%3Aphp+intitle%3Aphpinfo+"published+by+the+PHP+Group"'}]

        if funsel.lower() == "all":
            for full in arr:
                searchparam = full['searchparam'].replace("{}", self.param)
                self.google(searchparam, full['name'])
        elif int(funsel) in [1,2,3,4,5,6,7,8,9]:
            searchparam = arr[int(funsel)-1]['searchparam'].replace("{}", self.param)
            self.google(searchparam, arr[int(funsel)-1]['name'])

