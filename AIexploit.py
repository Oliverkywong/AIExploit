#!/bin/env python
# -*- coding: utf-8 -*-
import os
import re
import json
import csv
import codecs
import ipaddress
import numpy as np
import pandas as pd
from docopt import docopt
from util import Utilty
from metasploit import Metasploit
from banner import *

# Check IP address format.
def is_valid_ip(rhost):
    try:
        ipaddress.ip_address(rhost)
        return True
    except ValueError:
        return False

# Define command option.
__doc__ = """{f}
Usage:
    {f} (-t <ip_addr> | --target <ip_addr>) (-m <mode> | --mode <mode>)
    {f} (-t <ip_addr> | --target <ip_addr>) [(-p <port> | --port <port>)] [(-s <product> | --service <product>)]
    {f} -h | --help

Options:
    -t --target   Require  : IP address of target server.
    -m --mode     Require  : Execution mode "learn/run".
    -p --port     Optional : Indicate port number of target server.
    -s --service  Optional : Indicate product name of target server.
    -h --help     Optional : Show this screen and exit.
""".format(f=__file__)

# Parse command arguments.
def command_parse():
    args = docopt(__doc__)
    ip_addr = args['<ip_addr>']
    mode = args['<mode>']
    return ip_addr, mode

# Common list of all threads.
com_port_list = []
com_exploit_list = []
com_payload_list = []
com_indicate_flag = False

if __name__ == '__main__':
    util = Utilty()

    # Get command arguments.
    rhost, mode = command_parse()
    if is_valid_ip(rhost) is False:
        util.print_message('fail' , 'Invalid IP address: {}'.format(rhost))
        exit(1)
    if mode not in ['learn', 'run']:
        util.print_message(FAIL, 'Invalid mode: {}'.format(mode))
        exit(1)

    # Show initial banner.
    show_banner()
    # Initialization of Metasploit.
    env = Metasploit(rhost)
    if rhost in env.prohibited_list:
        util.print_message('fail' , 'Target IP={} is prohibited.\n'
                                 '    Please check "config.ini"'.format(rhost))
        exit(1)    
    nmap_result = os.getcwd() + '/nmap_result_' + env.rhost + '.xml'
    nmap_command = env.nmap_command + ' ' + nmap_result + ' ' + env.rhost + '\n'
    com_port_list, proto_list, info_list = env.get_port_list(env.rhost, nmap_command, env.nmap_timeout, nmap_result)
    com_exploit_list = env.get_exploit_list()
    com_payload_list = env.get_payload_list()
    com_payload_list.append('no payload')

    # Create exploit tree.
    exploit_tree = env.get_exploit_tree()
    target_tree = env.get_target_info(rhost, proto_list, info_list)    

    service_list = target_tree['service_list']
    port_list = target_tree['opened_port_list']
    threads = []
    worker_list = []

    if len(service_list) == 0:
        util.print_message('warn', 'No open service.')
        util.print_message('warn', 'Shutdown Exploit Expert...')
        exit(1)
    else:
        for idx,service in enumerate(service_list):
            sess_info = env.run(exploit_tree, target_tree, idx, mode)
    saved_file = os.path.join(env.data_path, 'target_info_' + rhost + '.json')
    fin = codecs.open(saved_file, 'r', 'utf-8')
    target_tree = json.loads(fin.read().replace('\0', ''))
    fin.close()

    target_tree.update({'session_reverse':len(target_tree['session_list'])})
    if len(target_tree['session_list']) == 0:
        target_tree.update({'exploit_sucess':False})
    else:
        target_tree.update({'exploit_sucess':True})
        
    fout = codecs.open(saved_file, 'w', 'utf-8')
    json.dump(target_tree, fout, indent=4)
    fout.close()  
   
    del target_tree['rhost']
    for service in target_tree['service_list']:
        del service['port']
    target_tree_csv = pd.DataFrame([target_tree])
    target_tree_csv.to_csv(os.path.join(env.data_path, 'target_dataset.csv'), mode='a', header=False, index=False)
    util.print_message('ok', 'Saved target_dataset.csv')
    